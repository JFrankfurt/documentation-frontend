{"sections":[{"title":"adapters","classes":[{"name":"CollateralizedSimpleInterestLoanAdapter","methods":[{"name":"canReturnCollateral","description":"","params":"agreementId: string","source":"adapters/collateralized_simple_interest_loan_adapter.ts#L348","signature":"canReturnCollateral(\n  agreementId: string,\n): Promise"},{"name":"canSeizeCollateral","description":"","params":"agreementId: string","source":"adapters/collateralized_simple_interest_loan_adapter.ts#L358","signature":"canSeizeCollateral(\n  agreementId: string,\n): Promise"},{"name":"fromDebtOrder","description":"","params":"debtOrder: Instance","source":"adapters/collateralized_simple_interest_loan_adapter.ts#L198","signature":"fromDebtOrder(\n  debtOrder: Instance,\n): Promise"},{"name":"fromDebtRegistryEntry","description":"","params":"entry: DebtRegistryEntry","source":"adapters/collateralized_simple_interest_loan_adapter.ts#L226","signature":"fromDebtRegistryEntry(\n  entry: DebtRegistryEntry,\n): Promise"},{"name":"getRepaymentSchedule","description":"","params":"debtEntry: DebtRegistryEntry","source":"adapters/collateralized_simple_interest_loan_adapter.ts#L252","signature":"getRepaymentSchedule(\n  debtEntry: DebtRegistryEntry,\n): undefined"},{"name":"isCollateralWithdrawn","description":"Returns true if the collateral associated with the given agreement ID\nhas already been seized.","params":"agreementId: string","source":"adapters/collateralized_simple_interest_loan_adapter.ts#L375","signature":"isCollateralWithdrawn(\n  agreementId: string,\n): Promise"},{"name":"packParameters","description":"","params":"simpleTermsParams: SimpleInterestTermsContractParameters,<br/>  collateralTermsParams: CollateralizedTermsContractParameters","source":"adapters/collateralized_simple_interest_loan_adapter.ts#L331","signature":"packParameters(\n  simpleTermsParams: SimpleInterestTermsContractParameters,<br/>  collateralTermsParams: CollateralizedTermsContractParameters,\n): string"},{"name":"returnCollateralAsync","description":"Returns collateral to the debt agreement's original collateralizer\nif and only if the debt agreement's term has lapsed and\nthe total expected repayment value has been repaid.","params":"agreementId: string,<br/>  options: TxData","source":"adapters/collateralized_simple_interest_loan_adapter.ts#L297","signature":"returnCollateralAsync(\n  agreementId: string,<br/>  options: TxData,\n): Promise"},{"name":"seizeCollateralAsync","description":"Seizes the collateral from the given debt agreement and\ntransfers it to the debt agreement's beneficiary.","params":"agreementId: string,<br/>  options: TxData","source":"adapters/collateralized_simple_interest_loan_adapter.ts#L271","signature":"seizeCollateralAsync(\n  agreementId: string,<br/>  options: TxData,\n): Promise"},{"name":"toDebtOrder","description":"","params":"collateralizedSimpleInterestLoanOrder: CollateralizedSimpleInterestLoanOrder","source":"adapters/collateralized_simple_interest_loan_adapter.ts#L109","signature":"toDebtOrder(\n  collateralizedSimpleInterestLoanOrder: CollateralizedSimpleInterestLoanOrder,\n): Promise"},{"name":"unpackParameters","description":"","params":"termsContractParameters: string","source":"adapters/collateralized_simple_interest_loan_adapter.ts#L314","signature":"unpackParameters(\n  termsContractParameters: string,\n): CollateralizedSimpleInterestTermsContractParameters"},{"name":"validateAsync","description":"Validates that the basic invariants have been met for a given\nCollateralizedSimpleInterestLoanOrder.","params":"loanOrder: CollateralizedSimpleInterestLoanOrder","source":"adapters/collateralized_simple_interest_loan_adapter.ts#L190","signature":"validateAsync(\n  loanOrder: CollateralizedSimpleInterestLoanOrder,\n): Promise"}]},{"name":"CollateralizedLoanTerms","methods":[{"name":"assertValidParams","description":"","params":"params: CollateralizedTermsContractParameters","source":"adapters/collateralized_simple_interest_loan_terms.ts#L59","signature":"assertValidParams(\n  params: CollateralizedTermsContractParameters,\n): void"},{"name":"packParameters","description":"","params":"params: CollateralizedTermsContractParameters","source":"adapters/collateralized_simple_interest_loan_terms.ts#L26","signature":"packParameters(\n  params: CollateralizedTermsContractParameters,\n): string"},{"name":"unpackParameters","description":"","params":"packedParams: string","source":"adapters/collateralized_simple_interest_loan_terms.ts#L45","signature":"unpackParameters(\n  packedParams: string,\n): CollateralizedTermsContractParameters"}]},{"name":"SimpleInterestLoanAdapter","methods":[{"name":"fromDebtOrder","description":"Asynchronously generates a simple interest loan order given a Dharma\ndebt order instance.","params":"debtOrder: Instance","source":"adapters/simple_interest_loan_adapter.ts#L149","signature":"fromDebtOrder(\n  debtOrder: Instance,\n): Promise"},{"name":"fromDebtRegistryEntry","description":"Asynchronously translates a Dharma debt registry entry into a\nsimple interest loan order.","params":"entry: DebtRegistryEntry","source":"adapters/simple_interest_loan_adapter.ts#L181","signature":"fromDebtRegistryEntry(\n  entry: DebtRegistryEntry,\n): Promise"},{"name":"getRepaymentSchedule","description":"","params":"debtEntry: DebtRegistryEntry","source":"adapters/simple_interest_loan_adapter.ts#L205","signature":"getRepaymentSchedule(\n  debtEntry: DebtRegistryEntry,\n): undefined"},{"name":"toDebtOrder","description":"Asynchronously generates a Dharma debt order given an instance of a\nsimple interest loan order.","params":"simpleInterestLoanOrder: SimpleInterestLoanOrder","source":"adapters/simple_interest_loan_adapter.ts#L96","signature":"toDebtOrder(\n  simpleInterestLoanOrder: SimpleInterestLoanOrder,\n): Promise"},{"name":"unpackParameters","description":"","params":"packedParams: string","source":"adapters/simple_interest_loan_adapter.ts#L218","signature":"unpackParameters(\n  packedParams: string,\n): SimpleInterestTermsContractParameters"},{"name":"validateAsync","description":"Validates that the basic invariants have been met for a given SimpleInterestLoanOrder.","params":"simpleInterestLoanOrder: SimpleInterestLoanOrder","source":"adapters/simple_interest_loan_adapter.ts#L228","signature":"validateAsync(\n  simpleInterestLoanOrder: SimpleInterestLoanOrder,\n): Promise"}]}]},{"title":"apis","classes":[{"name":"AdaptersAPI","methods":[{"name":"getAdapterByTermsContractAddress","description":"","params":"termsContractAddress: string","source":"apis/adapters_api.ts#L57","signature":"getAdapterByTermsContractAddress(\n  termsContractAddress: string,\n): Promise"}]},{"name":"BlockchainAPI","methods":[{"name":"awaitTransactionMinedAsync","description":"Asynchronously polls the Ethereum blockchain until the specified\ntransaction has been mined or the timeout limit is reached, whichever\noccurs first.","params":"txHash: string,<br/>  pollingIntervalMs: number,<br/>  timeoutMs: number","source":"apis/blockchain_api.ts#L66","signature":"awaitTransactionMinedAsync(\n  txHash: string,<br/>  pollingIntervalMs: number,<br/>  timeoutMs: number,\n): Promise"},{"name":"getErrorLogs","description":"Asynchronously retrieve any error logs that might have occurred during a\ngiven transaction. These errors are returned as human-readable strings.","params":"txHash: string","source":"apis/blockchain_api.ts#L45","signature":"getErrorLogs(\n  txHash: string,\n): Promise"}]},{"name":"ContractsAPI","methods":[{"name":"doesTokenCorrespondToSymbol","description":"","params":"tokenAddress: string,<br/>  symbol: string","source":"apis/contracts_api.ts#L483","signature":"doesTokenCorrespondToSymbol(\n  tokenAddress: string,<br/>  symbol: string,\n): Promise"},{"name":"getTermsContractType","description":"Given a terms contract address, returns the name of that contract.","params":"contractAddress: string","source":"apis/contracts_api.ts#L298","signature":"getTermsContractType(\n  contractAddress: string,\n): Promise"},{"name":"getTokenAddressByIndexAsync","description":"Given the index of a token in the Token Registry, returns the address of that\ntoken's contract.","params":"index: BigNumber","source":"apis/contracts_api.ts#L423","signature":"getTokenAddressByIndexAsync(\n  index: BigNumber,\n): Promise"},{"name":"getTokenAddressBySymbolAsync","description":"","params":"symbol: string","source":"apis/contracts_api.ts#L404","signature":"getTokenAddressBySymbolAsync(\n  symbol: string,\n): Promise"},{"name":"getTokenIndexBySymbolAsync","description":"","params":"symbol: string","source":"apis/contracts_api.ts#L435","signature":"getTokenIndexBySymbolAsync(\n  symbol: string,\n): Promise"},{"name":"getTokenSymbolByIndexAsync","description":"","params":"index: BigNumber","source":"apis/contracts_api.ts#L445","signature":"getTokenSymbolByIndexAsync(\n  index: BigNumber,\n): Promise"},{"name":"loadCollateralizedSimpleInterestTermsContract","description":"","params":"transactionOptions: object","source":"apis/contracts_api.ts#L346","signature":"loadCollateralizedSimpleInterestTermsContract(\n  transactionOptions: object,\n): Promise"},{"name":"loadCollateralizerAsync","description":"","params":"transactionOptions: object","source":"apis/contracts_api.ts#L106","signature":"loadCollateralizerAsync(\n  transactionOptions: object,\n): Promise"},{"name":"loadDebtKernelAsync","description":"","params":"transactionOptions: object","source":"apis/contracts_api.ts#L84","signature":"loadDebtKernelAsync(\n  transactionOptions: object,\n): Promise"},{"name":"loadDebtRegistryAsync","description":"","params":"transactionOptions: object","source":"apis/contracts_api.ts#L130","signature":"loadDebtRegistryAsync(\n  transactionOptions: object,\n): Promise"},{"name":"loadDebtTokenAsync","description":"","params":"transactionOptions: object","source":"apis/contracts_api.ts#L154","signature":"loadDebtTokenAsync(\n  transactionOptions: object,\n): Promise"},{"name":"loadDharmaContractsAsync","description":"","params":"transactionOptions: object","source":"apis/contracts_api.ts#L72","signature":"loadDharmaContractsAsync(\n  transactionOptions: object,\n): Promise"},{"name":"loadERC20TokenAsync","description":"","params":"tokenAddress: string,<br/>  transactionOptions: object","source":"apis/contracts_api.ts#L250","signature":"loadERC20TokenAsync(\n  tokenAddress: string,<br/>  transactionOptions: object,\n): Promise"},{"name":"loadRepaymentRouterAsync","description":"","params":"transactionOptions: object","source":"apis/contracts_api.ts#L176","signature":"loadRepaymentRouterAsync(\n  transactionOptions: object,\n): Promise"},{"name":"loadRepaymentRouterAtAsync","description":"","params":"address: string,<br/>  transactionOptions: object","source":"apis/contracts_api.ts#L200","signature":"loadRepaymentRouterAtAsync(\n  address: string,<br/>  transactionOptions: object,\n): Promise"},{"name":"loadSimpleInterestTermsContract","description":"","params":"transactionOptions: object","source":"apis/contracts_api.ts#L317","signature":"loadSimpleInterestTermsContract(\n  transactionOptions: object,\n): Promise"},{"name":"loadTermsContractAsync","description":"","params":"termsContractAddress: string,<br/>  transactionOptions: object","source":"apis/contracts_api.ts#L269","signature":"loadTermsContractAsync(\n  termsContractAddress: string,<br/>  transactionOptions: object,\n): Promise"},{"name":"loadTokenByIndexAsync","description":"Given the index of a token in the token registry, loads an instance of that\ntoken and returns it.","params":"index: BigNumber,<br/>  transactionOptions: object","source":"apis/contracts_api.ts#L474","signature":"loadTokenByIndexAsync(\n  index: BigNumber,<br/>  transactionOptions: object,\n): Promise"},{"name":"loadTokenBySymbolAsync","description":"","params":"symbol: string,<br/>  transactionOptions: object","source":"apis/contracts_api.ts#L457","signature":"loadTokenBySymbolAsync(\n  symbol: string,<br/>  transactionOptions: object,\n): Promise"},{"name":"loadTokenRegistry","description":"","params":"transactionOptions: object","source":"apis/contracts_api.ts#L377","signature":"loadTokenRegistry(\n  transactionOptions: object,\n): Promise"},{"name":"loadTokenTransferProxyAsync","description":"","params":"transactionOptions: object","source":"apis/contracts_api.ts#L221","signature":"loadTokenTransferProxyAsync(\n  transactionOptions: object,\n): Promise"}]},{"name":"DebtTokenAPI","methods":[{"name":"approveAsync","description":"","params":"to: string,<br/>  tokenID: BigNumber,<br/>  options: TxData","source":"apis/debt_token_api.ts#L101","signature":"approveAsync(\n  to: string,<br/>  tokenID: BigNumber,<br/>  options: TxData,\n): Promise"},{"name":"balanceOf","description":"","params":"owner: string","source":"apis/debt_token_api.ts#L69","signature":"balanceOf(\n  owner: string,\n): Promise"},{"name":"exists","description":"","params":"tokenID: BigNumber","source":"apis/debt_token_api.ts#L93","signature":"exists(\n  tokenID: BigNumber,\n): Promise"},{"name":"getApproved","description":"","params":"tokenID: BigNumber","source":"apis/debt_token_api.ts#L144","signature":"getApproved(\n  tokenID: BigNumber,\n): Promise"},{"name":"isApprovedForAll","description":"","params":"owner: string,<br/>  operator: string","source":"apis/debt_token_api.ts#L186","signature":"isApprovedForAll(\n  owner: string,<br/>  operator: string,\n): Promise"},{"name":"ownerOf","description":"","params":"tokenID: BigNumber","source":"apis/debt_token_api.ts#L77","signature":"ownerOf(\n  tokenID: BigNumber,\n): Promise"},{"name":"setApprovalForAllAsync","description":"","params":"operator: string,<br/>  approved: boolean,<br/>  options: TxData","source":"apis/debt_token_api.ts#L160","signature":"setApprovalForAllAsync(\n  operator: string,<br/>  approved: boolean,<br/>  options: TxData,\n): Promise"},{"name":"transferAsync","description":"","params":"to: string,<br/>  tokenID: BigNumber,<br/>  options: TxData","source":"apis/debt_token_api.ts#L194","signature":"transferAsync(\n  to: string,<br/>  tokenID: BigNumber,<br/>  options: TxData,\n): Promise"},{"name":"transferFromAsync","description":"","params":"from: string,<br/>  to: string,<br/>  tokenID: BigNumber,<br/>  data: string,<br/>  options: TxData","source":"apis/debt_token_api.ts#L217","signature":"transferFromAsync(\n  from: string,<br/>  to: string,<br/>  tokenID: BigNumber,<br/>  data: string,<br/>  options: TxData,\n): Promise"}]},{"name":"OrderAPI","methods":[{"name":"assertFillableAsync","description":"Throws with error message if a given order is not able to be filled.","params":"debtOrder: Instance,<br/>  txOptions: TxData","source":"apis/order_api.ts#L154","signature":"assertFillableAsync(\n  debtOrder: Instance,<br/>  txOptions: TxData,\n): Promise"},{"name":"cancelIssuanceAsync","description":"","params":"issuanceCommitment: IssuanceCommitment,<br/>  txOptions: TxData","source":"apis/order_api.ts#L317","signature":"cancelIssuanceAsync(\n  issuanceCommitment: IssuanceCommitment,<br/>  txOptions: TxData,\n): Promise"},{"name":"cancelOrderAsync","description":"Asynchronously cancel a debt order if it has yet to be fulfilled.","params":"debtOrder: Instance,<br/>  options: TxData","source":"apis/order_api.ts#L182","signature":"cancelOrderAsync(\n  debtOrder: Instance,<br/>  options: TxData,\n): Promise"},{"name":"checkOrderFilledAsync","description":"Asynchronously checks whether the order is filled.","params":"debtOrder: Instance,<br/>  options: TxData","source":"apis/order_api.ts#L231","signature":"checkOrderFilledAsync(\n  debtOrder: Instance,<br/>  options: TxData,\n): Promise"},{"name":"fillAsync","description":"Asynchronously fills a signed debt order.","params":"debtOrder: Instance,<br/>  options: TxData","source":"apis/order_api.ts#L120","signature":"fillAsync(\n  debtOrder: Instance,<br/>  options: TxData,\n): Promise"},{"name":"generate","description":"Generate a Dharma debt order, given the specified adapter and its associated\nparameters object.","params":"adapter: Interface,<br/>  params: object","source":"apis/order_api.ts#L288","signature":"generate(\n  adapter: Interface,<br/>  params: object,\n): Promise"},{"name":"getDebtOrder","description":"Given an issuanceHash, returns a DebtOrder instance.","params":"issuanceHash: string","source":"apis/order_api.ts#L272","signature":"getDebtOrder(\n  issuanceHash: string,\n): Promise"},{"name":"getIssuanceHash","description":"Given a complete debt order, asynchronously computes the issuanceHash\n(alias of debtAgreementId) of the debt order.","params":"debtOrder: Instance","source":"apis/order_api.ts#L258","signature":"getIssuanceHash(\n  debtOrder: Instance,\n): Promise"},{"name":"unpackTerms","description":"Decode tightly-packed representation of debt agreement's terms in a\ngiven debt order into an object with human-interpretable keys and values.","params":"debtOrder: Instance","source":"apis/order_api.ts#L308","signature":"unpackTerms(\n  debtOrder: Instance,\n): Promise"}]},{"name":"ServicingAPI","methods":[{"name":"getDebtRegistryEntry","description":"Asynchronously retrieve the `DebtRegistryEntry` instance mapped to the\nissuance hash specified.","params":"issuanceHash: string","source":"apis/servicing_api.ts#L199","signature":"getDebtRegistryEntry(\n  issuanceHash: string,\n): Promise"},{"name":"getDebtsAsync","description":"Given a debtor's account, returns a list of issuance hashes\ncorresponding to debts which the debtor has issued in the past.","params":"account: string","source":"apis/servicing_api.ts#L222","signature":"getDebtsAsync(\n  account: string,\n): Promise"},{"name":"getExpectedValueRepaid","description":"Asynchronously determine the expected value of repayments at a given\npoint in time for a given debt agreement.","params":"issuanceHash: string,<br/>  timestamp: number","source":"apis/servicing_api.ts#L146","signature":"getExpectedValueRepaid(\n  issuanceHash: string,<br/>  timestamp: number,\n): Promise"},{"name":"getInvestmentsAsync","description":"Given a creditor's account, returns a list of issuance hashes\ncorresponding to debts which the creditor has invested in.","params":"account: string","source":"apis/servicing_api.ts#L237","signature":"getInvestmentsAsync(\n  account: string,\n): Promise"},{"name":"getRepaymentScheduleAsync","description":"","params":"issuanceHash: string","source":"apis/servicing_api.ts#L264","signature":"getRepaymentScheduleAsync(\n  issuanceHash: string,\n): Promise"},{"name":"getTotalExpectedRepayment","description":"Given an issuanceHash, returns the total amount that the borrower is expected to\npay by the end of the associated terms agreement.","params":"issuanceHash: string","source":"apis/servicing_api.ts#L170","signature":"getTotalExpectedRepayment(\n  issuanceHash: string,\n): Promise"},{"name":"getValueRepaid","description":"Asynchronously retrieve the amount that has been repaid to date towards a\ndebt agreement.","params":"issuanceHash: string","source":"apis/servicing_api.ts#L126","signature":"getValueRepaid(\n  issuanceHash: string,\n): Promise"},{"name":"makeRepayment","description":"Asynchronously issue a repayment towards a debt agreement.","params":"issuanceHash: string,<br/>  amount: BigNumber,<br/>  tokenAddress: string,<br/>  options: TxData","source":"apis/servicing_api.ts#L62","signature":"makeRepayment(\n  issuanceHash: string,<br/>  amount: BigNumber,<br/>  tokenAddress: string,<br/>  options: TxData,\n): Promise"}]},{"name":"SignerAPI","methods":[{"name":"asCreditor","description":"Given a debt order, produce ECDSA signature of the creditor commitment hash using the creditor's\nprivate key.  If current web3 provider is unable to produce a cryptographic signature using\nthe creditor's private key (for instance, if the account is not unlocked in Geth / Parity), it\nthrows.","params":"debtOrder: Instance,<br/>  shouldAddPersonalMessagePrefix: boolean","source":"apis/signer_api.ts#L80","signature":"asCreditor(\n  debtOrder: Instance,<br/>  shouldAddPersonalMessagePrefix: boolean,\n): Promise"},{"name":"asDebtor","description":"Given a debt order, produce ECDSA signature of the debtor commitment hash using the debtor's\nprivate key.  If current web3 provider is unable to produce a cryptographic signature using\nthe debtor's private key (for instance, if the account is not unlocked in Geth / Parity), it\nthrows.","params":"debtOrder: Instance,<br/>  shouldAddPersonalMessagePrefix: boolean","source":"apis/signer_api.ts#L48","signature":"asDebtor(\n  debtOrder: Instance,<br/>  shouldAddPersonalMessagePrefix: boolean,\n): Promise"},{"name":"asUnderwriter","description":"Given a debt order, produce ECDSA signature of the underwriter commitment hash using the underwriter's\nprivate key.  If current web3 provider is unable to produce a cryptographic signature using\nthe underwriter's private key (for instance, if the account is not unlocked in Geth / Parity), it\nthrows.","params":"debtOrder: Instance,<br/>  shouldAddPersonalMessagePrefix: boolean","source":"apis/signer_api.ts#L112","signature":"asUnderwriter(\n  debtOrder: Instance,<br/>  shouldAddPersonalMessagePrefix: boolean,\n): Promise"}]},{"name":"TokenAPI","methods":[{"name":"getBalanceAsync","description":"Asynchronously retrieve the balance of tokens for the owner specified.","params":"tokenAddress: string,<br/>  ownerAddress: string","source":"apis/token_api.ts#L126","signature":"getBalanceAsync(\n  tokenAddress: string,<br/>  ownerAddress: string,\n): Promise"},{"name":"getNumDecimals","description":"Asynchronously retrieve the number of decimal points used by the given token.","params":"tokenSymbol: string","source":"apis/token_api.ts#L264","signature":"getNumDecimals(\n  tokenSymbol: string,\n): Promise"},{"name":"getProxyAllowanceAsync","description":"Asynchronously determine the allowance afforded to the\n`tokenTransferProxy` allotted by the specified owner.","params":"tokenAddress: string,<br/>  ownerAddress: string","source":"apis/token_api.ts#L196","signature":"getProxyAllowanceAsync(\n  tokenAddress: string,<br/>  ownerAddress: string,\n): Promise"},{"name":"getSupportedTokens","description":"Returns an array of token attributes, including symbol and name, for tokens that are\nlisted in Dharma's token registry.","params":"","source":"apis/token_api.ts#L215","signature":"getSupportedTokens(\n  ,\n): Promise"},{"name":"getTokenSymbolList","description":"Asynchronously retrieve the list of symbols of the tokens in the TokenRegistry.","params":"","source":"apis/token_api.ts#L246","signature":"getTokenSymbolList(\n  ,\n): Promise"},{"name":"setProxyAllowanceAsync","description":"Asynchronously set an allowance to the `tokenTransferProxy`.","params":"tokenAddress: string,<br/>  allowance: BigNumber,<br/>  options: TxData","source":"apis/token_api.ts#L142","signature":"setProxyAllowanceAsync(\n  tokenAddress: string,<br/>  allowance: BigNumber,<br/>  options: TxData,\n): Promise"},{"name":"setUnlimitedProxyAllowanceAsync","description":"Asynchronously set an unlimited proxy allowance to the `tokenTransferProxy`.","params":"tokenAddress: string,<br/>  options: TxData","source":"apis/token_api.ts#L173","signature":"setUnlimitedProxyAllowanceAsync(\n  tokenAddress: string,<br/>  options: TxData,\n): Promise"},{"name":"transferAsync","description":"Asynchronously transfer value denominated in the specified ERC20 token to\nthe address specified.","params":"tokenAddress: string,<br/>  to: string,<br/>  value: BigNumber,<br/>  options: TxData","source":"apis/token_api.ts#L50","signature":"transferAsync(\n  tokenAddress: string,<br/>  to: string,<br/>  value: BigNumber,<br/>  options: TxData,\n): Promise"},{"name":"transferFromAsync","description":"Asynchronously transfer the value amount in the token specified so long\nas the sender of the message has received sufficient allowance on behalf\nof `from` to do so.","params":"tokenAddress: string,<br/>  from: string,<br/>  to: string,<br/>  value: BigNumber,<br/>  options: TxData","source":"apis/token_api.ts#L86","signature":"transferFromAsync(\n  tokenAddress: string,<br/>  from: string,<br/>  to: string,<br/>  value: BigNumber,<br/>  options: TxData,\n): Promise"}]}]},{"title":"invariants","classes":[{"name":"AccountAssertions","methods":[{"name":"notNull","description":"","params":"account: string,<br/>  errorMessage: string","source":"invariants/account.ts#L5","signature":"notNull(\n  account: string,<br/>  errorMessage: string,\n): void"},{"name":"notSender","description":"","params":"account: string,<br/>  txOptions: TxData,<br/>  errorMessage: string","source":"invariants/account.ts#L11","signature":"notSender(\n  account: string,<br/>  txOptions: TxData,<br/>  errorMessage: string,\n): void"}]},{"name":"AdapterAssertions","methods":[{"name":"conformsToInterface","description":"","params":"object: any,<br/>  errorMessage: string","source":"invariants/adapter.ts#L4","signature":"conformsToInterface(\n  object: any,<br/>  errorMessage: string,\n): void"}]},{"name":"DebtAgreementAssertions","methods":[{"name":"exists","description":"","params":"issuanceHash: string,<br/>  debtToken: DebtTokenContract,<br/>  errorMessage: string","source":"invariants/debt_agreement.ts#L5","signature":"exists(\n  issuanceHash: string,<br/>  debtToken: DebtTokenContract,<br/>  errorMessage: string,\n): Promise"}]},{"name":"DebtTokenAssertions","methods":[{"name":"canBeReceivedByAccountWithData","description":"","params":"web3: Web3,<br/>  tokenID: BigNumber,<br/>  recipient: string,<br/>  sender: string,<br/>  data: string,<br/>  errorMessage: string","source":"invariants/debt_token.ts#L69","signature":"canBeReceivedByAccountWithData(\n  web3: Web3,<br/>  tokenID: BigNumber,<br/>  recipient: string,<br/>  sender: string,<br/>  data: string,<br/>  errorMessage: string,\n): Promise"},{"name":"canBeTransferredByAccount","description":"","params":"debtTokenContract: DebtTokenContract,<br/>  tokenID: BigNumber,<br/>  account: string,<br/>  errorMessage: string","source":"invariants/debt_token.ts#L45","signature":"canBeTransferredByAccount(\n  debtTokenContract: DebtTokenContract,<br/>  tokenID: BigNumber,<br/>  account: string,<br/>  errorMessage: string,\n): Promise"},{"name":"exists","description":"","params":"debtTokenContract: DebtTokenContract,<br/>  tokenID: BigNumber,<br/>  errorMessage: string","source":"invariants/debt_token.ts#L7","signature":"exists(\n  debtTokenContract: DebtTokenContract,<br/>  tokenID: BigNumber,<br/>  errorMessage: string,\n): Promise"},{"name":"notOwner","description":"","params":"debtTokenContract: DebtTokenContract,<br/>  tokenID: BigNumber,<br/>  account: string,<br/>  errorMessage: string","source":"invariants/debt_token.ts#L32","signature":"notOwner(\n  debtTokenContract: DebtTokenContract,<br/>  tokenID: BigNumber,<br/>  account: string,<br/>  errorMessage: string,\n): Promise"},{"name":"onlyOwner","description":"","params":"debtTokenContract: DebtTokenContract,<br/>  tokenID: BigNumber,<br/>  account: string,<br/>  errorMessage: string","source":"invariants/debt_token.ts#L19","signature":"onlyOwner(\n  debtTokenContract: DebtTokenContract,<br/>  tokenID: BigNumber,<br/>  account: string,<br/>  errorMessage: string,\n): Promise"}]},{"name":"Assertions","methods":[]},{"name":"OrderAssertions","methods":[{"name":"debtOrderNotCancelledAsync","description":"","params":"debtOrder: Instance,<br/>  debtKernel: DebtKernelContract,<br/>  errorMessage: string","source":"invariants/order.ts#L96","signature":"debtOrderNotCancelledAsync(\n  debtOrder: Instance,<br/>  debtKernel: DebtKernelContract,<br/>  errorMessage: string,\n): Promise"},{"name":"issuanceNotCancelledAsync","description":"","params":"debtOrder: Instance,<br/>  debtKernel: DebtKernelContract,<br/>  errorMessage: string","source":"invariants/order.ts#L114","signature":"issuanceNotCancelledAsync(\n  debtOrder: Instance,<br/>  debtKernel: DebtKernelContract,<br/>  errorMessage: string,\n): Promise"},{"name":"notAlreadyIssuedAsync","description":"","params":"debtOrder: Instance,<br/>  debtToken: DebtTokenContract,<br/>  errorMessage: string","source":"invariants/order.ts#L78","signature":"notAlreadyIssuedAsync(\n  debtOrder: Instance,<br/>  debtToken: DebtTokenContract,<br/>  errorMessage: string,\n): Promise"},{"name":"notExpired","description":"","params":"debtOrder: Instance,<br/>  errorMessage: string","source":"invariants/order.ts#L68","signature":"notExpired(\n  debtOrder: Instance,<br/>  errorMessage: string,\n): Promise"},{"name":"senderAuthorizedToCancelIssuance","description":"","params":"debtOrder: Instance,<br/>  transactionOptions: TxData,<br/>  errorMessage: string","source":"invariants/order.ts#L141","signature":"senderAuthorizedToCancelIssuance(\n  debtOrder: Instance,<br/>  transactionOptions: TxData,<br/>  errorMessage: string,\n): void"},{"name":"senderAuthorizedToCancelOrder","description":"","params":"debtOrder: Instance,<br/>  transactionOptions: TxData,<br/>  errorMessage: string","source":"invariants/order.ts#L131","signature":"senderAuthorizedToCancelOrder(\n  debtOrder: Instance,<br/>  transactionOptions: TxData,<br/>  errorMessage: string,\n): void"},{"name":"sufficientCollateralizerAllowanceAsync","description":"","params":"debtOrder: Instance,<br/>  collateralToken: ERC20Contract,<br/>  collateralAmount: BigNumber,<br/>  tokenTransferProxy: TokenTransferProxyContract,<br/>  errorMessage: string","source":"invariants/order.ts#L261","signature":"sufficientCollateralizerAllowanceAsync(\n  debtOrder: Instance,<br/>  collateralToken: ERC20Contract,<br/>  collateralAmount: BigNumber,<br/>  tokenTransferProxy: TokenTransferProxyContract,<br/>  errorMessage: string,\n): Promise"},{"name":"sufficientCollateralizerBalanceAsync","description":"","params":"debtOrder: Instance,<br/>  collateralToken: ERC20Contract,<br/>  collateralAmount: BigNumber,<br/>  errorMessage: string","source":"invariants/order.ts#L278","signature":"sufficientCollateralizerBalanceAsync(\n  debtOrder: Instance,<br/>  collateralToken: ERC20Contract,<br/>  collateralAmount: BigNumber,<br/>  errorMessage: string,\n): Promise"},{"name":"sufficientCreditorAllowanceAsync","description":"","params":"debtOrder: Instance,<br/>  principalToken: ERC20Contract,<br/>  tokenTransferProxy: TokenTransferProxyContract,<br/>  errorMessage: string","source":"invariants/order.ts#L241","signature":"sufficientCreditorAllowanceAsync(\n  debtOrder: Instance,<br/>  principalToken: ERC20Contract,<br/>  tokenTransferProxy: TokenTransferProxyContract,<br/>  errorMessage: string,\n): Promise"},{"name":"sufficientCreditorBalanceAsync","description":"","params":"debtOrder: Instance,<br/>  principalToken: ERC20Contract,<br/>  errorMessage: string","source":"invariants/order.ts#L229","signature":"sufficientCreditorBalanceAsync(\n  debtOrder: Instance,<br/>  principalToken: ERC20Contract,<br/>  errorMessage: string,\n): Promise"},{"name":"validCreditorSignature","description":"","params":"debtOrder: Instance,<br/>  transactionOptions: TxData,<br/>  errorMessage: string","source":"invariants/order.ts#L181","signature":"validCreditorSignature(\n  debtOrder: Instance,<br/>  transactionOptions: TxData,<br/>  errorMessage: string,\n): Promise"},{"name":"validDebtorFee","description":"","params":"debtOrder: Instance,<br/>  errorMessage: string","source":"invariants/order.ts#L32","signature":"validDebtorFee(\n  debtOrder: Instance,<br/>  errorMessage: string,\n): void"},{"name":"validDebtorSignature","description":"","params":"debtOrder: Instance,<br/>  transactionOptions: TxData,<br/>  errorMessage: string","source":"invariants/order.ts#L159","signature":"validDebtorSignature(\n  debtOrder: Instance,<br/>  transactionOptions: TxData,<br/>  errorMessage: string,\n): Promise"},{"name":"validFees","description":"","params":"debtOrder: Instance,<br/>  errorMessage: string","source":"invariants/order.ts#L59","signature":"validFees(\n  debtOrder: Instance,<br/>  errorMessage: string,\n): void"},{"name":"validRelayerFee","description":"","params":"debtOrder: Instance,<br/>  errorMessage: string","source":"invariants/order.ts#L49","signature":"validRelayerFee(\n  debtOrder: Instance,<br/>  errorMessage: string,\n): void"},{"name":"validUnderwriterFee","description":"","params":"debtOrder: Instance,<br/>  errorMessage: string","source":"invariants/order.ts#L39","signature":"validUnderwriterFee(\n  debtOrder: Instance,<br/>  errorMessage: string,\n): void"},{"name":"validUnderwriterSignature","description":"","params":"debtOrder: Instance,<br/>  transactionOptions: TxData,<br/>  errorMessage: string","source":"invariants/order.ts#L203","signature":"validUnderwriterSignature(\n  debtOrder: Instance,<br/>  transactionOptions: TxData,<br/>  errorMessage: string,\n): Promise"}]},{"name":"SchemaAssertions","methods":[{"name":"address","description":"","params":"variableName: string,<br/>  value: any","source":"invariants/schema.ts#L26","signature":"address(\n  variableName: string,<br/>  value: any,\n): void"},{"name":"bytes","description":"","params":"variableName: string,<br/>  value: any","source":"invariants/schema.ts#L34","signature":"bytes(\n  variableName: string,<br/>  value: any,\n): void"},{"name":"bytes32","description":"","params":"variableName: string,<br/>  value: any","source":"invariants/schema.ts#L30","signature":"bytes32(\n  variableName: string,<br/>  value: any,\n): void"},{"name":"collateralizedSimpleInterestLoanOrder","description":"","params":"variableName: string,<br/>  value: any","source":"invariants/schema.ts#L50","signature":"collateralizedSimpleInterestLoanOrder(\n  variableName: string,<br/>  value: any,\n): void"},{"name":"debtOrder","description":"","params":"variableName: string,<br/>  value: any","source":"invariants/schema.ts#L58","signature":"debtOrder(\n  variableName: string,<br/>  value: any,\n): void"},{"name":"debtOrderWithTermsAndDebtorSpecified","description":"","params":"variableName: string,<br/>  value: any","source":"invariants/schema.ts#L66","signature":"debtOrderWithTermsAndDebtorSpecified(\n  variableName: string,<br/>  value: any,\n): void"},{"name":"debtOrderWithTermsDebtorAndCreditorSpecified","description":"","params":"variableName: string,<br/>  value: any","source":"invariants/schema.ts#L74","signature":"debtOrderWithTermsDebtorAndCreditorSpecified(\n  variableName: string,<br/>  value: any,\n): void"},{"name":"debtOrderWithTermsSpecified","description":"","params":"variableName: string,<br/>  value: any","source":"invariants/schema.ts#L62","signature":"debtOrderWithTermsSpecified(\n  variableName: string,<br/>  value: any,\n): void"},{"name":"number","description":"","params":"variableName: string,<br/>  value: any","source":"invariants/schema.ts#L38","signature":"number(\n  variableName: string,<br/>  value: any,\n): void"},{"name":"simpleInterestLoanOrder","description":"","params":"variableName: string,<br/>  value: any","source":"invariants/schema.ts#L46","signature":"simpleInterestLoanOrder(\n  variableName: string,<br/>  value: any,\n): void"},{"name":"wholeNumber","description":"","params":"variableName: string,<br/>  value: any","source":"invariants/schema.ts#L42","signature":"wholeNumber(\n  variableName: string,<br/>  value: any,\n): void"}]},{"name":"TokenAssertions","methods":[{"name":"exists","description":"","params":"tokenSymbol: string,<br/>  tokenRegistry: TokenRegistryContract,<br/>  errorMessage: string","source":"invariants/token.ts#L13","signature":"exists(\n  tokenSymbol: string,<br/>  tokenRegistry: TokenRegistryContract,<br/>  errorMessage: string,\n): Promise"},{"name":"hasSufficientAllowance","description":"","params":"principalToken: ERC20Contract,<br/>  payer: string,<br/>  target: string,<br/>  allowanceRequired: BigNumber,<br/>  errorMessage: string","source":"invariants/token.ts#L52","signature":"hasSufficientAllowance(\n  principalToken: ERC20Contract,<br/>  payer: string,<br/>  target: string,<br/>  allowanceRequired: BigNumber,<br/>  errorMessage: string,\n): Promise"},{"name":"hasSufficientBalance","description":"","params":"principalToken: ERC20Contract,<br/>  payer: string,<br/>  balanceRequired: BigNumber,<br/>  errorMessage: string","source":"invariants/token.ts#L39","signature":"hasSufficientBalance(\n  principalToken: ERC20Contract,<br/>  payer: string,<br/>  balanceRequired: BigNumber,<br/>  errorMessage: string,\n): Promise"},{"name":"implementsERC20","description":"","params":"candidate: any","source":"invariants/token.ts#L27","signature":"implementsERC20(\n  candidate: any,\n): Promise"}]}]},{"title":"schemas","classes":[{"name":"SchemaValidator","methods":[{"name":"addCustomValidators","description":"","params":"","source":"schemas/schema_validator.ts#L38","signature":"addCustomValidators(\n  ,\n): void"},{"name":"addSchema","description":"","params":"schema: Schema","source":"schemas/schema_validator.ts#L25","signature":"addSchema(\n  schema: Schema,\n): void"},{"name":"isValid","description":"","params":"instance: any,<br/>  schema: Schema","source":"schemas/schema_validator.ts#L33","signature":"isValid(\n  instance: any,<br/>  schema: Schema,\n): boolean"},{"name":"validate","description":"","params":"instance: any,<br/>  schema: Schema","source":"schemas/schema_validator.ts#L29","signature":"validate(\n  instance: any,<br/>  schema: Schema,\n): ValidatorResult"}]}]},{"title":"types","classes":[{"name":"DebtRegistryEntry","methods":[{"name":"fromData","description":"","params":"data: DebtRegistryEntryData","source":"types/debt_registry_entry.ts#L53","signature":"fromData(\n  data: DebtRegistryEntryData,\n): DebtRegistryEntry"}]},{"name":"RepaymentSchedule","methods":[{"name":"toArray","description":"Returns an array of dates (as unix timestamps) comprising the repayment schedule.","params":"","source":"types/repayment_schedule.ts#L49","signature":"toArray(\n  ,\n): undefined"}]},{"name":"Token","methods":[]}]},{"title":"wrappers","classes":[{"name":"BaseContract","methods":[{"name":"applyDefaultsToTxDataAsync","description":"","params":"txData: T,<br/>  estimateGasAsync: undefined","source":"wrappers/contract_wrappers/base_contract_wrapper.ts#L32","signature":"applyDefaultsToTxDataAsync(\n  txData: T,<br/>  estimateGasAsync: undefined,\n): Promise"}]},{"name":"CollateralizedSimpleInterestTermsContractContract","methods":[{"name":"applyDefaultsToTxDataAsync","description":"","params":"txData: T,<br/>  estimateGasAsync: undefined","source":"wrappers/contract_wrappers/base_contract_wrapper.ts#L32","signature":"applyDefaultsToTxDataAsync(\n  txData: T,<br/>  estimateGasAsync: undefined,\n): Promise"},{"name":"at","description":"","params":"address: string,<br/>  web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/collateralized_simple_interest_terms_contract_wrapper.ts#L436","signature":"at(\n  address: string,<br/>  web3: Web3,<br/>  defaults: Partial,\n): Promise"},{"name":"deployed","description":"","params":"web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/collateralized_simple_interest_terms_contract_wrapper.ts#L398","signature":"deployed(\n  web3: Web3,<br/>  defaults: Partial,\n): Promise"}]},{"name":"CollateralizerContract","methods":[{"name":"applyDefaultsToTxDataAsync","description":"","params":"txData: T,<br/>  estimateGasAsync: undefined","source":"wrappers/contract_wrappers/base_contract_wrapper.ts#L32","signature":"applyDefaultsToTxDataAsync(\n  txData: T,<br/>  estimateGasAsync: undefined,\n): Promise"},{"name":"deploy","description":"","params":"args: undefined","source":"wrappers/contract_wrappers/collateralizer_wrapper.ts#L370","signature":"deploy(\n  args: undefined,\n): Promise"},{"name":"at","description":"","params":"address: string,<br/>  web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/collateralizer_wrapper.ts#L429","signature":"at(\n  address: string,<br/>  web3: Web3,<br/>  defaults: Partial,\n): Promise"},{"name":"deployed","description":"","params":"web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/collateralizer_wrapper.ts#L397","signature":"deployed(\n  web3: Web3,<br/>  defaults: Partial,\n): Promise"}]},{"name":"DebtKernelContract","methods":[{"name":"applyDefaultsToTxDataAsync","description":"","params":"txData: T,<br/>  estimateGasAsync: undefined","source":"wrappers/contract_wrappers/base_contract_wrapper.ts#L32","signature":"applyDefaultsToTxDataAsync(\n  txData: T,<br/>  estimateGasAsync: undefined,\n): Promise"},{"name":"at","description":"","params":"address: string,<br/>  web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/debt_kernel_wrapper.ts#L455","signature":"at(\n  address: string,<br/>  web3: Web3,<br/>  defaults: Partial,\n): Promise"},{"name":"deployed","description":"","params":"web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/debt_kernel_wrapper.ts#L423","signature":"deployed(\n  web3: Web3,<br/>  defaults: Partial,\n): Promise"}]},{"name":"DebtRegistryContract","methods":[{"name":"applyDefaultsToTxDataAsync","description":"","params":"txData: T,<br/>  estimateGasAsync: undefined","source":"wrappers/contract_wrappers/base_contract_wrapper.ts#L32","signature":"applyDefaultsToTxDataAsync(\n  txData: T,<br/>  estimateGasAsync: undefined,\n): Promise"},{"name":"at","description":"","params":"address: string,<br/>  web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/debt_registry_wrapper.ts#L497","signature":"at(\n  address: string,<br/>  web3: Web3,<br/>  defaults: Partial,\n): Promise"},{"name":"deployed","description":"","params":"web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/debt_registry_wrapper.ts#L462","signature":"deployed(\n  web3: Web3,<br/>  defaults: Partial,\n): Promise"}]},{"name":"DebtTokenContract","methods":[{"name":"applyDefaultsToTxDataAsync","description":"","params":"txData: T,<br/>  estimateGasAsync: undefined","source":"wrappers/contract_wrappers/base_contract_wrapper.ts#L32","signature":"applyDefaultsToTxDataAsync(\n  txData: T,<br/>  estimateGasAsync: undefined,\n): Promise"},{"name":"at","description":"","params":"address: string,<br/>  web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/debt_token_wrapper.ts#L678","signature":"at(\n  address: string,<br/>  web3: Web3,<br/>  defaults: Partial,\n): Promise"},{"name":"deployed","description":"","params":"web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/debt_token_wrapper.ts#L646","signature":"deployed(\n  web3: Web3,<br/>  defaults: Partial,\n): Promise"}]},{"name":"DummyTokenContract","methods":[{"name":"applyDefaultsToTxDataAsync","description":"","params":"txData: T,<br/>  estimateGasAsync: undefined","source":"wrappers/contract_wrappers/base_contract_wrapper.ts#L32","signature":"applyDefaultsToTxDataAsync(\n  txData: T,<br/>  estimateGasAsync: undefined,\n): Promise"},{"name":"at","description":"","params":"address: string,<br/>  web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/dummy_token_wrapper.ts#L438","signature":"at(\n  address: string,<br/>  web3: Web3,<br/>  defaults: Partial,\n): Promise"}]},{"name":"ERC20Contract","methods":[{"name":"applyDefaultsToTxDataAsync","description":"","params":"txData: T,<br/>  estimateGasAsync: undefined","source":"wrappers/contract_wrappers/base_contract_wrapper.ts#L32","signature":"applyDefaultsToTxDataAsync(\n  txData: T,<br/>  estimateGasAsync: undefined,\n): Promise"},{"name":"at","description":"","params":"address: string,<br/>  web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/erc20_wrapper.ts#L172","signature":"at(\n  address: string,<br/>  web3: Web3,<br/>  defaults: Partial,\n): Promise"}]},{"name":"ERC721ReceiverContract","methods":[{"name":"applyDefaultsToTxDataAsync","description":"","params":"txData: T,<br/>  estimateGasAsync: undefined","source":"wrappers/contract_wrappers/base_contract_wrapper.ts#L32","signature":"applyDefaultsToTxDataAsync(\n  txData: T,<br/>  estimateGasAsync: undefined,\n): Promise"},{"name":"at","description":"","params":"address: string,<br/>  web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/erc721_receiver_wrapper.ts#L62","signature":"at(\n  address: string,<br/>  web3: Web3,<br/>  defaults: Partial,\n): Promise"}]},{"name":"MockERC721ReceiverContract","methods":[{"name":"applyDefaultsToTxDataAsync","description":"","params":"txData: T,<br/>  estimateGasAsync: undefined","source":"wrappers/contract_wrappers/base_contract_wrapper.ts#L32","signature":"applyDefaultsToTxDataAsync(\n  txData: T,<br/>  estimateGasAsync: undefined,\n): Promise"},{"name":"at","description":"","params":"address: string,<br/>  web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/mock_erc721_receiver_wrapper.ts#L262","signature":"at(\n  address: string,<br/>  web3: Web3,<br/>  defaults: Partial,\n): Promise"},{"name":"deployed","description":"","params":"web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/mock_erc721_receiver_wrapper.ts#L227","signature":"deployed(\n  web3: Web3,<br/>  defaults: Partial,\n): Promise"}]},{"name":"RepaymentRouterContract","methods":[{"name":"applyDefaultsToTxDataAsync","description":"","params":"txData: T,<br/>  estimateGasAsync: undefined","source":"wrappers/contract_wrappers/base_contract_wrapper.ts#L32","signature":"applyDefaultsToTxDataAsync(\n  txData: T,<br/>  estimateGasAsync: undefined,\n): Promise"},{"name":"at","description":"","params":"address: string,<br/>  web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/repayment_router_wrapper.ts#L268","signature":"at(\n  address: string,<br/>  web3: Web3,<br/>  defaults: Partial,\n): Promise"},{"name":"deployed","description":"","params":"web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/repayment_router_wrapper.ts#L233","signature":"deployed(\n  web3: Web3,<br/>  defaults: Partial,\n): Promise"}]},{"name":"SimpleInterestTermsContractContract","methods":[{"name":"applyDefaultsToTxDataAsync","description":"","params":"txData: T,<br/>  estimateGasAsync: undefined","source":"wrappers/contract_wrappers/base_contract_wrapper.ts#L32","signature":"applyDefaultsToTxDataAsync(\n  txData: T,<br/>  estimateGasAsync: undefined,\n): Promise"},{"name":"at","description":"","params":"address: string,<br/>  web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/simple_interest_terms_contract_wrapper.ts#L218","signature":"at(\n  address: string,<br/>  web3: Web3,<br/>  defaults: Partial,\n): Promise"},{"name":"deployed","description":"","params":"web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/simple_interest_terms_contract_wrapper.ts#L183","signature":"deployed(\n  web3: Web3,<br/>  defaults: Partial,\n): Promise"}]},{"name":"TermsContract","methods":[{"name":"applyDefaultsToTxDataAsync","description":"","params":"txData: T,<br/>  estimateGasAsync: undefined","source":"wrappers/contract_wrappers/base_contract_wrapper.ts#L32","signature":"applyDefaultsToTxDataAsync(\n  txData: T,<br/>  estimateGasAsync: undefined,\n): Promise"},{"name":"at","description":"","params":"address: string,<br/>  web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/terms_contract_wrapper.ts#L169","signature":"at(\n  address: string,<br/>  web3: Web3,<br/>  defaults: Partial,\n): Promise"}]},{"name":"TokenRegistryContract","methods":[{"name":"applyDefaultsToTxDataAsync","description":"","params":"txData: T,<br/>  estimateGasAsync: undefined","source":"wrappers/contract_wrappers/base_contract_wrapper.ts#L32","signature":"applyDefaultsToTxDataAsync(\n  txData: T,<br/>  estimateGasAsync: undefined,\n): Promise"},{"name":"at","description":"","params":"address: string,<br/>  web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/token_registry_wrapper.ts#L234","signature":"at(\n  address: string,<br/>  web3: Web3,<br/>  defaults: Partial,\n): Promise"},{"name":"deployed","description":"","params":"web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/token_registry_wrapper.ts#L199","signature":"deployed(\n  web3: Web3,<br/>  defaults: Partial,\n): Promise"}]},{"name":"TokenTransferProxyContract","methods":[{"name":"applyDefaultsToTxDataAsync","description":"","params":"txData: T,<br/>  estimateGasAsync: undefined","source":"wrappers/contract_wrappers/base_contract_wrapper.ts#L32","signature":"applyDefaultsToTxDataAsync(\n  txData: T,<br/>  estimateGasAsync: undefined,\n): Promise"},{"name":"at","description":"","params":"address: string,<br/>  web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/token_transfer_proxy_wrapper.ts#L274","signature":"at(\n  address: string,<br/>  web3: Web3,<br/>  defaults: Partial,\n): Promise"},{"name":"deployed","description":"","params":"web3: Web3,<br/>  defaults: Partial","source":"wrappers/contract_wrappers/token_transfer_proxy_wrapper.ts#L239","signature":"deployed(\n  web3: Web3,<br/>  defaults: Partial,\n): Promise"}]},{"name":"DebtOrderWrapper","methods":[{"name":"getCreditor","description":"","params":"","source":"wrappers/debt_order_wrapper.ts#L14","signature":"getCreditor(\n  ,\n): string"},{"name":"getCreditorCommitmentHash","description":"Returns the payload that a creditor must sign in order to\nindicate her consent to the parameters of the debt order --\nwhich is, currently, the debt order's hash.","params":"","source":"wrappers/debt_order_wrapper.ts#L106","signature":"getCreditorCommitmentHash(\n  ,\n): string"},{"name":"getDebtAgreementId","description":"Returns the debt agreement's unique identifier --\nan alias for the issuance commitment hash cast to a BigNumber","params":"","source":"wrappers/debt_order_wrapper.ts#L83","signature":"getDebtAgreementId(\n  ,\n): BigNumber"},{"name":"getDebtOrder","description":"","params":"","source":"wrappers/debt_order_wrapper.ts#L180","signature":"getDebtOrder(\n  ,\n): Instance"},{"name":"getDebtorCommitmentHash","description":"Returns the payload that a debtor must sign in order to\nindicate her consent to the parameters of the debt order --\nwhich is, currently, the debt order's hash.","params":"","source":"wrappers/debt_order_wrapper.ts#L94","signature":"getDebtorCommitmentHash(\n  ,\n): string"},{"name":"getHash","description":"Returns the hash of the debt order in its entirety, in the order defined\nin the Dharma whitepaper.\nSee https://whitepaper.dharma.io/#debtorcreditor-commitment-hash","params":"","source":"wrappers/debt_order_wrapper.ts#L62","signature":"getHash(\n  ,\n): string"},{"name":"getIssuanceCommitment","description":"Returns the subset of the debt order we refer to as the \"Issuance Commitment\".\nSee https://whitepaper.dharma.io/#debt-issuance-commitments","params":"","source":"wrappers/debt_order_wrapper.ts#L24","signature":"getIssuanceCommitment(\n  ,\n): IssuanceCommitment"},{"name":"getIssuanceCommitmentHash","description":"Returns the hash of this debt order's \"Issuance Commitment\".\nSee https://whitepaper.dharma.io/#debt-issuance-commitments","params":"","source":"wrappers/debt_order_wrapper.ts#L42","signature":"getIssuanceCommitmentHash(\n  ,\n): string"},{"name":"getOrderAddresses","description":"","params":"","source":"wrappers/debt_order_wrapper.ts#L130","signature":"getOrderAddresses(\n  ,\n): undefined"},{"name":"getOrderBytes32","description":"","params":"","source":"wrappers/debt_order_wrapper.ts#L154","signature":"getOrderBytes32(\n  ,\n): undefined"},{"name":"getOrderValues","description":"","params":"","source":"wrappers/debt_order_wrapper.ts#L141","signature":"getOrderValues(\n  ,\n): undefined"},{"name":"getSignaturesR","description":"","params":"","source":"wrappers/debt_order_wrapper.ts#L158","signature":"getSignaturesR(\n  ,\n): undefined"},{"name":"getSignaturesS","description":"","params":"","source":"wrappers/debt_order_wrapper.ts#L164","signature":"getSignaturesS(\n  ,\n): undefined"},{"name":"getSignaturesV","description":"","params":"","source":"wrappers/debt_order_wrapper.ts#L170","signature":"getSignaturesV(\n  ,\n): undefined"},{"name":"getUnderwriterCommitmentHash","description":"Returns the payload that an underwriter must sign in order to\nindicate her consent to the parameters of the debt order, as\ndefined in the Dharma whitepaper.","params":"","source":"wrappers/debt_order_wrapper.ts#L119","signature":"getUnderwriterCommitmentHash(\n  ,\n): string"}]}]}]}